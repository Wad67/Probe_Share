//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""ce07976a-9316-4e7d-b9df-03718ecb3201"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""7534aa97-39d8-4a98-b118-b3008829764c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""7834183f-af54-4bf6-b1bb-d2bd616eacfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""5346dfd3-69ba-4abd-aee1-58d0b1de3273"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""3a1b7a21-8c8f-4b5d-a91a-2170e2810fed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamX"",
                    ""type"": ""Value"",
                    ""id"": ""22ead386-d7f7-4af4-9991-0721ff4fe5f4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamY"",
                    ""type"": ""Value"",
                    ""id"": ""aed35ff1-eab2-45b0-af24-956c020f76ab"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LClick"",
                    ""type"": ""Button"",
                    ""id"": ""88c9d5d7-ee5c-4665-b6c4-fdc7ffe86dfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RClick"",
                    ""type"": ""Button"",
                    ""id"": ""5981e949-7e96-4a47-8b23-37c33339e55e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""4a02160f-8734-4108-960b-f61170df10c1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""169d269d-d326-4701-bfba-042020b20ad4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1db642c8-6e54-4698-956e-74de33a4ef29"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a08d5404-a90f-4cad-9c8d-a12214d84e59"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""910f5072-8c6e-4970-9391-40c81d6279b1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f539df0-b432-41e2-aada-44b2f67dbcc1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9554ccc-ba2b-4ef3-a495-74d02583544f"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""CamX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d63f37f-19ca-4d6c-a88e-09796751d916"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""CamY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a44a4b78-d425-4186-acfc-bcd02cfc1c7b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""LClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86c97735-7d46-4c24-97f0-9c701454da6a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""RClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3ca81ab-ef0e-4a57-9a7f-970bfe62f14d"",
                    ""path"": ""<Mouse>/scroll/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a93b8413-f4fc-4d3a-a634-e47566233105"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main"",
            ""bindingGroup"": ""Main"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Forward = m_Main.FindAction("Forward", throwIfNotFound: true);
        m_Main_Backward = m_Main.FindAction("Backward", throwIfNotFound: true);
        m_Main_Left = m_Main.FindAction("Left", throwIfNotFound: true);
        m_Main_Right = m_Main.FindAction("Right", throwIfNotFound: true);
        m_Main_CamX = m_Main.FindAction("CamX", throwIfNotFound: true);
        m_Main_CamY = m_Main.FindAction("CamY", throwIfNotFound: true);
        m_Main_LClick = m_Main.FindAction("LClick", throwIfNotFound: true);
        m_Main_RClick = m_Main.FindAction("RClick", throwIfNotFound: true);
        m_Main_Scroll = m_Main.FindAction("Scroll", throwIfNotFound: true);
        m_Main_Jump = m_Main.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Forward;
    private readonly InputAction m_Main_Backward;
    private readonly InputAction m_Main_Left;
    private readonly InputAction m_Main_Right;
    private readonly InputAction m_Main_CamX;
    private readonly InputAction m_Main_CamY;
    private readonly InputAction m_Main_LClick;
    private readonly InputAction m_Main_RClick;
    private readonly InputAction m_Main_Scroll;
    private readonly InputAction m_Main_Jump;
    public struct MainActions
    {
        private @Player m_Wrapper;
        public MainActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Main_Forward;
        public InputAction @Backward => m_Wrapper.m_Main_Backward;
        public InputAction @Left => m_Wrapper.m_Main_Left;
        public InputAction @Right => m_Wrapper.m_Main_Right;
        public InputAction @CamX => m_Wrapper.m_Main_CamX;
        public InputAction @CamY => m_Wrapper.m_Main_CamY;
        public InputAction @LClick => m_Wrapper.m_Main_LClick;
        public InputAction @RClick => m_Wrapper.m_Main_RClick;
        public InputAction @Scroll => m_Wrapper.m_Main_Scroll;
        public InputAction @Jump => m_Wrapper.m_Main_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_MainActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_MainActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnBackward;
                @Left.started -= m_Wrapper.m_MainActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_MainActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnRight;
                @CamX.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCamX;
                @CamX.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCamX;
                @CamX.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCamX;
                @CamY.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCamY;
                @CamY.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCamY;
                @CamY.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCamY;
                @LClick.started -= m_Wrapper.m_MainActionsCallbackInterface.OnLClick;
                @LClick.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnLClick;
                @LClick.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnLClick;
                @RClick.started -= m_Wrapper.m_MainActionsCallbackInterface.OnRClick;
                @RClick.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnRClick;
                @RClick.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnRClick;
                @Scroll.started -= m_Wrapper.m_MainActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnScroll;
                @Jump.started -= m_Wrapper.m_MainActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @CamX.started += instance.OnCamX;
                @CamX.performed += instance.OnCamX;
                @CamX.canceled += instance.OnCamX;
                @CamY.started += instance.OnCamY;
                @CamY.performed += instance.OnCamY;
                @CamY.canceled += instance.OnCamY;
                @LClick.started += instance.OnLClick;
                @LClick.performed += instance.OnLClick;
                @LClick.canceled += instance.OnLClick;
                @RClick.started += instance.OnRClick;
                @RClick.performed += instance.OnRClick;
                @RClick.canceled += instance.OnRClick;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_MainSchemeIndex = -1;
    public InputControlScheme MainScheme
    {
        get
        {
            if (m_MainSchemeIndex == -1) m_MainSchemeIndex = asset.FindControlSchemeIndex("Main");
            return asset.controlSchemes[m_MainSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCamX(InputAction.CallbackContext context);
        void OnCamY(InputAction.CallbackContext context);
        void OnLClick(InputAction.CallbackContext context);
        void OnRClick(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
